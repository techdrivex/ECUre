import React, { useState } from 'react';
import { 
  AlertTriangle, 
  Shield, 
  Clock, 
  CheckCircle, 
  XCircle,
  ChevronDown,
  ChevronUp,
  ExternalLink,
  FileText
} from 'lucide-react';
import { cn } from '../utils/cn';

interface VulnerabilityCardProps {
  vulnerability: {
    id: number;
    title: string;
    description: string;
    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'INFO';
    status: 'OPEN' | 'IN_PROGRESS' | 'RESOLVED' | 'FALSE_POSITIVE';
    cve_id?: string;
    cvss_score?: number;
    location?: Record<string, any>;
    evidence?: string;
    recommendations?: string;
    discovered_at: string;
    resolved_at?: string;
  };
  onStatusChange?: (id: number, status: string) => void;
  className?: string;
  expandable?: boolean;
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  vulnerability,
  onStatusChange,
  className,
  expandable = true
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const severityConfig = {
    CRITICAL: {
      color: 'text-red-600 dark:text-red-400',
      bgColor: 'bg-red-50 dark:bg-red-900/20',
      borderColor: 'border-red-200 dark:border-red-800',
      icon: AlertTriangle,
      priority: 'Immediate'
    },
    HIGH: {
      color: 'text-orange-600 dark:text-orange-400',
      bgColor: 'bg-orange-50 dark:bg-orange-900/20',
      borderColor: 'border-orange-200 dark:border-orange-800',
      icon: AlertTriangle,
      priority: 'High'
    },
    MEDIUM: {
      color: 'text-yellow-600 dark:text-yellow-400',
      bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
      borderColor: 'border-yellow-200 dark:border-yellow-800',
      icon: Shield,
      priority: 'Medium'
    },
    LOW: {
      color: 'text-blue-600 dark:text-blue-400',
      bgColor: 'bg-blue-50 dark:bg-blue-900/20',
      borderColor: 'border-blue-200 dark:border-blue-800',
      icon: Shield,
      priority: 'Low'
    },
    INFO: {
      color: 'text-gray-600 dark:text-gray-400',
      bgColor: 'bg-gray-50 dark:bg-gray-900/20',
      borderColor: 'border-gray-200 dark:border-gray-800',
      icon: FileText,
      priority: 'Info'
    }
  };

  const statusConfig = {
    OPEN: {
      color: 'text-red-600 dark:text-red-400',
      bgColor: 'bg-red-100 dark:bg-red-900/30',
      icon: Clock
    },
    IN_PROGRESS: {
      color: 'text-yellow-600 dark:text-yellow-400',
      bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
      icon: Clock
    },
    RESOLVED: {
      color: 'text-green-600 dark:text-green-400',
      bgColor: 'bg-green-100 dark:bg-green-900/30',
      icon: CheckCircle
    },
    FALSE_POSITIVE: {
      color: 'text-gray-600 dark:text-gray-400',
      bgColor: 'bg-gray-100 dark:bg-gray-900/30',
      icon: XCircle
    }
  };

  const config = severityConfig[vulnerability.severity];
  const statusInfo = statusConfig[vulnerability.status];
  const SeverityIcon = config.icon;
  const StatusIcon = statusInfo.icon;

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getCVSSColor = (score?: number) => {
    if (!score) return 'text-gray-500 dark:text-gray-400';
    if (score >= 9.0) return 'text-red-600 dark:text-red-400';
    if (score >= 7.0) return 'text-orange-600 dark:text-orange-400';
    if (score >= 4.0) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-green-600 dark:text-green-400';
  };

  return (
    <div
      className={cn(
        'card card-hover border-l-4 transition-all duration-200',
        config.borderColor,
        className
      )}
    >
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className={cn(
              'p-2 rounded-full',
              config.bgColor
            )}>
              <SeverityIcon className={cn('w-5 h-5', config.color)} />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                {vulnerability.title}
              </h3>
              <div className="flex items-center space-x-3 mt-1">
                <span className={cn(
                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  config.bgColor,
                  config.color
                )}>
                  {vulnerability.severity}
                </span>
                <span className={cn(
                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  statusInfo.bgColor,
                  statusInfo.color
                )}>
                  <StatusIcon className="w-3 h-3 mr-1" />
                  {vulnerability.status}
                </span>
                {vulnerability.cve_id && (
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {vulnerability.cve_id}
                  </span>
                )}
              </div>
            </div>
          </div>
          
          {expandable && (
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              {isExpanded ? (
                <ChevronUp className="w-5 h-5 text-gray-500 dark:text-gray-400" />
              ) : (
                <ChevronDown className="w-5 h-5 text-gray-500 dark:text-gray-400" />
              )}
            </button>
          )}
        </div>

        {/* Description */}
        <p className="text-gray-700 dark:text-gray-300 mb-4">
          {vulnerability.description}
        </p>

        {/* Metadata */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm">
          <div>
            <span className="text-gray-500 dark:text-gray-400">Priority:</span>
            <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
              {config.priority}
            </span>
          </div>
          {vulnerability.cvss_score && (
            <div>
              <span className="text-gray-500 dark:text-gray-400">CVSS:</span>
              <span className={cn(
                'ml-2 font-medium',
                getCVSSColor(vulnerability.cvss_score)
              )}>
                {vulnerability.cvss_score}
              </span>
            </div>
          )}
          <div>
            <span className="text-gray-500 dark:text-gray-400">Discovered:</span>
            <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
              {formatDate(vulnerability.discovered_at)}
            </span>
          </div>
          {vulnerability.resolved_at && (
            <div>
              <span className="text-gray-500 dark:text-gray-400">Resolved:</span>
              <span className="ml-2 font-medium text-gray-900 dark:text-gray-100">
                {formatDate(vulnerability.resolved_at)}
              </span>
            </div>
          )}
        </div>

        {/* Expandable Content */}
        {expandable && isExpanded && (
          <div className="space-y-4 pt-4 border-t border-gray-200 dark:border-gray-700">
            {/* Evidence */}
            {vulnerability.evidence && (
              <div>
                <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">
                  Evidence
                </h4>
                <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-md">
                  <p className="text-sm text-gray-700 dark:text-gray-300 font-mono">
                    {vulnerability.evidence}
                  </p>
                </div>
              </div>
            )}

            {/* Location */}
            {vulnerability.location && (
              <div>
                <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">
                  Location
                </h4>
                <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-md">
                  <pre className="text-sm text-gray-700 dark:text-gray-300 font-mono">
                    {JSON.stringify(vulnerability.location, null, 2)}
                  </pre>
                </div>
              </div>
            )}

            {/* Recommendations */}
            {vulnerability.recommendations && (
              <div>
                <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">
                  Recommendations
                </h4>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  {vulnerability.recommendations}
                </p>
              </div>
            )}

            {/* Actions */}
            <div className="flex items-center justify-between pt-4">
              <div className="flex space-x-2">
                {vulnerability.cve_id && (
                  <a
                    href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cve_id}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  >
                    <ExternalLink className="w-4 h-4 mr-2" />
                    View CVE
                  </a>
                )}
              </div>

              {/* Status Change */}
              {onStatusChange && vulnerability.status !== 'RESOLVED' && (
                <select
                  value={vulnerability.status}
                  onChange={(e) => onStatusChange(vulnerability.id, e.target.value)}
                  className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="OPEN">Open</option>
                  <option value="IN_PROGRESS">In Progress</option>
                  <option value="RESOLVED">Resolved</option>
                  <option value="FALSE_POSITIVE">False Positive</option>
                </select>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
